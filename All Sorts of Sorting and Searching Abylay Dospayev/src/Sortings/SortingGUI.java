package Sortings;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.util.Random;
import javax.swing.GroupLayout;
import javax.swing.JDialog;
import javax.swing.JTable;

/**------------------------------------------------------------------------
* <pre>
* File          SortingGUI.java
* Description   A class representing the GUI used in sorting algorithms lab.
*               This lab illustrates six sorting algo. and two searching algo. 
* Project       All sorts of Sorting and Searching
* Platform     jdk 1.8.0_214; NetBeans IDE 11.3; Windows 10
* Course       CS 142, Edmonds Community College
* Hours        12 hours and 45 minutes
* Date         10/14/2022
* History log  
* </pre>
* @author	<i>Abylay Dospayev</i> 
------------------------------------------------------------------------*/
public class SortingGUI extends javax.swing.JFrame 
{
    //instance variables and constants 
    private final int MAX_NUMBER = 100000;  //number of integers to be generated
    private final int RANGE = 100000;  //range of integers : [0, RANGE]
    private final Random rand = new Random(); //random generator
    private long startTime, stopTime, elapsedTime;  //for timing
    private Integer[] integerArray = new Integer[MAX_NUMBER];
    //private Integer[] integerArray = [25, 11, 23, 45, 67, 78, 79]
    private static int heapSize;

/**------------------------------------------------------------------------
* <pre>
* File          SortingGUI()
* Description   The defaul constructor. Builds the GUI, creates instance of the 
*               class, sets the createjButton as the default button, 
*               and sets pi jpg as icon for the GUI
* @author	<i>Abylay Dospayev</i> 
* Date         10/10/2020
* History log  
* </pre>
------------------------------------------------------------------------*/
    public SortingGUI() {
        initComponents();
        //center the form at start 
        this.setLocationRelativeTo(null);
        //set createjButton as a default
        this.getRootPane().setDefaultButton(createjButton);
        //set icon to pi
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("src/Sortings/pi.png"));
        //set background color
        this.getContentPane().setBackground(Color.LIGHT_GRAY);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sortingbuttonGroup = new javax.swing.ButtonGroup();
        searchingbuttonGroup = new javax.swing.ButtonGroup();
        originaljPanel = new javax.swing.JPanel();
        originaljScrollPane = new javax.swing.JScrollPane();
        originaljList = new javax.swing.JList();
        originaljLabel = new javax.swing.JLabel();
        sortedjPanel = new javax.swing.JPanel();
        sortedjScrollPanel = new javax.swing.JScrollPane();
        sortedjList = new javax.swing.JList();
        sortedjLabel = new javax.swing.JLabel();
        sortingAlgorithmjPanel = new javax.swing.JPanel();
        sortingAlgoritmjLabel = new javax.swing.JLabel();
        sortingjPanel = new javax.swing.JPanel();
        bubblejRadioButton = new javax.swing.JRadioButton();
        selectionjRadioButton = new javax.swing.JRadioButton();
        insertionjRadioButton = new javax.swing.JRadioButton();
        quickjRadioButton = new javax.swing.JRadioButton();
        mergejRadioButton = new javax.swing.JRadioButton();
        heapjRadioButton = new javax.swing.JRadioButton();
        searchingjLabel = new javax.swing.JLabel();
        searchingjPanel = new javax.swing.JPanel();
        linearjRadioButton = new javax.swing.JRadioButton();
        linearjTextField = new javax.swing.JTextField();
        binaryjRadioButton = new javax.swing.JRadioButton();
        binaryjTextField = new javax.swing.JTextField();
        timejLabel = new javax.swing.JLabel();
        timejTextField = new javax.swing.JTextField();
        controljPanel = new javax.swing.JPanel();
        createjButton = new javax.swing.JButton();
        sortjButton = new javax.swing.JButton();
        exitjButton = new javax.swing.JButton();
        sortingjMenuBar = new javax.swing.JMenuBar();
        filejMenu = new javax.swing.JMenu();
        createjMenuItem = new javax.swing.JMenuItem();
        printjMenuItem = new javax.swing.JMenuItem();
        savejMenuItem = new javax.swing.JMenuItem();
        quitjMenuItem = new javax.swing.JMenuItem();
        statisticsMenu = new javax.swing.JMenu();
        generateJMenuItem = new javax.swing.JMenuItem();
        helpjMenu = new javax.swing.JMenu();
        aboutjMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lab 4-5-- Searching and Sorting");
        setPreferredSize(new java.awt.Dimension(500, 547));
        setResizable(false);

        originaljPanel.setPreferredSize(new java.awt.Dimension(120, 30));

        originaljScrollPane.setViewportView(originaljList);

        originaljLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        originaljLabel.setText("Original Values");
        originaljLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout originaljPanelLayout = new javax.swing.GroupLayout(originaljPanel);
        originaljPanel.setLayout(originaljPanelLayout);
        originaljPanelLayout.setHorizontalGroup(
            originaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(originaljPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(originaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(originaljScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(originaljLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)))
        );
        originaljPanelLayout.setVerticalGroup(
            originaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, originaljPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(originaljLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(originaljScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        getContentPane().add(originaljPanel, java.awt.BorderLayout.WEST);

        sortedjPanel.setPreferredSize(new java.awt.Dimension(120, 520));

        sortedjScrollPanel.setViewportView(sortedjList);

        sortedjLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        sortedjLabel.setText("Sorted Values");
        sortedjLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout sortedjPanelLayout = new javax.swing.GroupLayout(sortedjPanel);
        sortedjPanel.setLayout(sortedjPanelLayout);
        sortedjPanelLayout.setHorizontalGroup(
            sortedjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortedjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sortedjLabel)
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(sortedjPanelLayout.createSequentialGroup()
                .addComponent(sortedjScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        sortedjPanelLayout.setVerticalGroup(
            sortedjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortedjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sortedjLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortedjScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        getContentPane().add(sortedjPanel, java.awt.BorderLayout.EAST);

        sortingAlgorithmjPanel.setPreferredSize(new java.awt.Dimension(120, 50));

        sortingAlgoritmjLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        sortingAlgoritmjLabel.setText("Sorting Algorithms");
        sortingAlgoritmjLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sortingAlgoritmjLabel.setPreferredSize(new java.awt.Dimension(125, 20));

        sortingjPanel.setLayout(new java.awt.GridLayout(6, 1, 5, 5));

        sortingbuttonGroup.add(bubblejRadioButton);
        bubblejRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bubblejRadioButton.setText("Bubble");
        sortingjPanel.add(bubblejRadioButton);

        sortingbuttonGroup.add(selectionjRadioButton);
        selectionjRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        selectionjRadioButton.setText("Selection");
        sortingjPanel.add(selectionjRadioButton);

        sortingbuttonGroup.add(insertionjRadioButton);
        insertionjRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        insertionjRadioButton.setText("Insertion");
        sortingjPanel.add(insertionjRadioButton);

        sortingbuttonGroup.add(quickjRadioButton);
        quickjRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        quickjRadioButton.setText("Quick");
        sortingjPanel.add(quickjRadioButton);

        sortingbuttonGroup.add(mergejRadioButton);
        mergejRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mergejRadioButton.setText("Merge");
        sortingjPanel.add(mergejRadioButton);

        sortingbuttonGroup.add(heapjRadioButton);
        heapjRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        heapjRadioButton.setText("Heap");
        heapjRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heapjRadioButtonActionPerformed(evt);
            }
        });
        sortingjPanel.add(heapjRadioButton);

        searchingjLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchingjLabel.setText("Searching Algorithms");
        searchingjLabel.setFocusable(false);
        searchingjLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        searchingjLabel.setPreferredSize(new java.awt.Dimension(120, 20));
        searchingjLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        searchingjPanel.setPreferredSize(new java.awt.Dimension(120, 120));
        searchingjPanel.setLayout(new java.awt.GridLayout(6, 1));

        searchingbuttonGroup.add(linearjRadioButton);
        linearjRadioButton.setText("Linear Seacrh");
        linearjRadioButton.setEnabled(false);
        linearjRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearjRadioButtonActionPerformed(evt);
            }
        });
        searchingjPanel.add(linearjRadioButton);

        linearjTextField.setEnabled(false);
        linearjTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearjTextFieldActionPerformed(evt);
            }
        });
        searchingjPanel.add(linearjTextField);

        searchingbuttonGroup.add(binaryjRadioButton);
        binaryjRadioButton.setText("Binary Search");
        binaryjRadioButton.setEnabled(false);
        binaryjRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryjRadioButtonActionPerformed(evt);
            }
        });
        searchingjPanel.add(binaryjRadioButton);

        binaryjTextField.setEnabled(false);
        binaryjTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryjTextFieldActionPerformed(evt);
            }
        });
        searchingjPanel.add(binaryjTextField);

        timejLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timejLabel.setText("Time:");
        searchingjPanel.add(timejLabel);
        searchingjPanel.add(timejTextField);

        javax.swing.GroupLayout sortingAlgorithmjPanelLayout = new javax.swing.GroupLayout(sortingAlgorithmjPanel);
        sortingAlgorithmjPanel.setLayout(sortingAlgorithmjPanelLayout);
        sortingAlgorithmjPanelLayout.setHorizontalGroup(
            sortingAlgorithmjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortingAlgorithmjPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(sortingAlgoritmjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(sortingAlgorithmjPanelLayout.createSequentialGroup()
                .addGroup(sortingAlgorithmjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sortingAlgorithmjPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(sortingAlgorithmjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sortingjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchingjPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(sortingAlgorithmjPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(searchingjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)))
                .addContainerGap())
        );
        sortingAlgorithmjPanelLayout.setVerticalGroup(
            sortingAlgorithmjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortingAlgorithmjPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(sortingAlgoritmjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sortingjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchingjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchingjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        getContentPane().add(sortingAlgorithmjPanel, java.awt.BorderLayout.CENTER);

        controljPanel.setMinimumSize(new java.awt.Dimension(420, 60));
        controljPanel.setLayout(new java.awt.GridLayout(1, 3, 3, 3));

        createjButton.setBackground(new java.awt.Color(204, 255, 204));
        createjButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        createjButton.setMnemonic('C');
        createjButton.setText("Create New Data");
        createjButton.setToolTipText("Generate random integers in giver range");
        createjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createjButtonActionPerformed(evt);
            }
        });
        controljPanel.add(createjButton);

        sortjButton.setBackground(new java.awt.Color(204, 255, 204));
        sortjButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        sortjButton.setText("Sort");
        sortjButton.setEnabled(false);
        sortjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortjButtonActionPerformed(evt);
            }
        });
        controljPanel.add(sortjButton);

        exitjButton.setBackground(new java.awt.Color(204, 255, 204));
        exitjButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        exitjButton.setText("Exit");
        exitjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitjButtonActionPerformed(evt);
            }
        });
        controljPanel.add(exitjButton);

        getContentPane().add(controljPanel, java.awt.BorderLayout.SOUTH);

        filejMenu.setMnemonic('F');
        filejMenu.setText("File");

        createjMenuItem.setMnemonic('D');
        createjMenuItem.setText("Create Data");
        filejMenu.add(createjMenuItem);

        printjMenuItem.setMnemonic('P');
        printjMenuItem.setText("Print Form ");
        printjMenuItem.setToolTipText("Print Form as GUI");
        printjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printjMenuItemActionPerformed(evt);
            }
        });
        filejMenu.add(printjMenuItem);

        savejMenuItem.setMnemonic('D');
        savejMenuItem.setText("Save");
        savejMenuItem.setEnabled(false);
        filejMenu.add(savejMenuItem);

        quitjMenuItem.setMnemonic('Q');
        quitjMenuItem.setText("Exit");
        quitjMenuItem.setToolTipText("Quit the application");
        quitjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitjMenuItemActionPerformed(evt);
            }
        });
        filejMenu.add(quitjMenuItem);

        sortingjMenuBar.add(filejMenu);

        statisticsMenu.setText("Statistics");

        generateJMenuItem.setText("Generate Table");
        generateJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateJMenuItemActionPerformed(evt);
            }
        });
        statisticsMenu.add(generateJMenuItem);

        sortingjMenuBar.add(statisticsMenu);

        helpjMenu.setMnemonic('H');
        helpjMenu.setText("Help");

        aboutjMenuItem.setMnemonic('A');
        aboutjMenuItem.setText("About");
        aboutjMenuItem.setToolTipText("Show about form");
        aboutjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutjMenuItemActionPerformed(evt);
            }
        });
        helpjMenu.add(aboutjMenuItem);

        sortingjMenuBar.add(helpjMenu);

        setJMenuBar(sortingjMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        printjMenuItemActionPerformed()
    * Description   Event Handler for printJMenuItem to print the form as a GUI
    * @param        evt ActionEvent
    * @author       <i>Abylay Dospayev</i>
    * Date          10/14/2022
    * History Log      
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void printjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printjMenuItemActionPerformed
        PrintUtilities.printComponent(this);
    }//GEN-LAST:event_printjMenuItemActionPerformed
/**------------------------------------------------------------------------
      * <pre>
     * Method       quitjMenuItemActionPerformed()
     * Description  Event handler for quitjMenuItem. Calls exitjButton to 
     *              end the application
     * @param       evt -- Action Event
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * </pre>
     ------------------------------------------------------------------------*/
    private void quitjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitjMenuItemActionPerformed
        //call exitjButton
        exitjButton.doClick();
    }//GEN-LAST:event_quitjMenuItemActionPerformed
     /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        aboutJMenuItemActionPerformed()
    * Description   Event Handler for aboutJMenuItemActionPerformed to show About form
    * @param        evt ActionEvent
    * @author       <i>Abylay Dospayev</i>
    * Date          9/28/2022
    * History Log      
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void aboutjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutjMenuItemActionPerformed
         //Display About form
        About aboutWindow = new About(this, true);
        aboutWindow.setVisible(true);
    }//GEN-LAST:event_aboutjMenuItemActionPerformed
/**------------------------------------------------------------------------
      * <pre>
     * Method       exitjButtonActionPerformed()
     * Description  Event handler for exitjButton. Ends application
     * @param       evt -- Action Event
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * </pre>
     ------------------------------------------------------------------------*/
    private void exitjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitjButtonActionPerformed
        // Exit the application
        System.exit(0);
    }//GEN-LAST:event_exitjButtonActionPerformed
 /**------------------------------------------------------------------------
      * <pre>
     * Method       createjButtonActionPerformed()
     * Description  Event handler for createjButton. Calls 
     *              generateRandomInt to generate random integers
     * @param       evt -- Action Event
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * </pre>
     ------------------------------------------------------------------------*/
    private void createjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createjButtonActionPerformed
        this.setTitle("Creating--" + MAX_NUMBER);
        generateRandomInt();
        originaljList.setListData(integerArray); //add array to Jlist
        sortjButton.setEnabled(true);
        linearjRadioButton.setEnabled(true);
        binaryjRadioButton.setEnabled(true);
        //createjMenuItem(true);
        printjMenuItem.setEnabled(true);
        savejMenuItem.setEnabled(true);
    }//GEN-LAST:event_createjButtonActionPerformed
    /**------------------------------------------------------------------------
      * <pre>
     * Method       sortjButtonActionPerformed()
     * Description  Event handler for sortjButton. Creates an array of primitive
     *              type int, and calls the appropriate selected sorting algorithm.
     *              Displays time it takes for sorting
     * @param       evt -- Action Event
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * </pre>
     ------------------------------------------------------------------------*/
    private void sortjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortjButtonActionPerformed
        this.setTitle("Sorting--" + MAX_NUMBER);
        int radButton = whichRadioButton();
        //create an array of primitive int type
        int[] dataArray = new int[integerArray.length];
        int[] copyAray = new int[integerArray.length];
        //copy objects into primitive arrays and recopy copy into data
        for (int i = 0; i < dataArray.length; i++)
            copyAray[i] = dataArray[i] = integerArray[i];
        switch(radButton)
        {
            case 0: //bubble
                System.arraycopy(copyAray, 0, dataArray, 0, copyAray.length);
                startTime = System.currentTimeMillis();
                SortingAndSearchingAlgorithms.bubbleSort(dataArray);
                stopTime = System.currentTimeMillis();
                elapsedTime = stopTime - startTime;
                timejTextField.setText(String.valueOf(elapsedTime));
                break;
            case 1: //selection
                System.arraycopy(copyAray, 0, dataArray, 0, copyAray.length);
                startTime = System.currentTimeMillis();
                SortingAndSearchingAlgorithms.selectionSort(dataArray);
                stopTime = System.currentTimeMillis();
                elapsedTime = stopTime - startTime;
                timejTextField.setText(String.valueOf(elapsedTime));
                break;
            case 2: //insertion
                System.arraycopy(copyAray, 0, dataArray, 0, copyAray.length);
                startTime = System.currentTimeMillis();
                SortingAndSearchingAlgorithms.insertionSort(dataArray);
                stopTime = System.currentTimeMillis();
                elapsedTime = stopTime - startTime;
                timejTextField.setText(String.valueOf(elapsedTime));
                break;
            case 3: //quick
                System.arraycopy(copyAray, 0, dataArray, 0, copyAray.length);
                startTime = System.currentTimeMillis();
                SortingAndSearchingAlgorithms.quickSort(dataArray);
                stopTime = System.currentTimeMillis();
                elapsedTime = stopTime - startTime;
                timejTextField.setText(String.valueOf(elapsedTime)); 
                break;
             case 4: //merge
                System.arraycopy(copyAray, 0, dataArray, 0, copyAray.length);
                startTime = System.currentTimeMillis();
                SortingAndSearchingAlgorithms.mergeSort(dataArray);
                stopTime = System.currentTimeMillis();
                elapsedTime = stopTime - startTime;
                timejTextField.setText(String.valueOf(elapsedTime));
                break;
             case 5: //heap
                System.arraycopy(copyAray, 0, dataArray, 0, copyAray.length);
                startTime = System.currentTimeMillis();
                SortingAndSearchingAlgorithms.heapSort(dataArray);
                stopTime = System.currentTimeMillis();
                elapsedTime = stopTime - startTime;
                timejTextField.setText(String.valueOf(elapsedTime)); 
                break;
        }
        display(dataArray);
        linearjTextField.setText("");
        binaryjTextField.setText("");
        linearjRadioButton.setEnabled(true);
        binaryjRadioButton.setEnabled(true);
        linearjRadioButton.setSelected(false);
        binaryjRadioButton.setSelected(false);
        
    }//GEN-LAST:event_sortjButtonActionPerformed
    /**------------------------------------------------------------------------
      * <pre>
     * Method       linearjRadioButtonActionPerformed()
     * Description  Event handler for the linearjRadioButton. Makes 
     *              binaryJTextField not editable and linearJTextField editable
     * @param       intArray int[]
     * @param       key int
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * </pre>
     ------------------------------------------------------------------------*/
    private void linearjRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearjRadioButtonActionPerformed
        binaryjTextField.setText("");
        binaryjTextField.setEnabled(false);
        linearjTextField.setEditable(true);
        linearjTextField.setEnabled(true);
        linearjTextField.requestFocus();
    }//GEN-LAST:event_linearjRadioButtonActionPerformed
    /**------------------------------------------------------------------------
      * <pre>
     * Method       binaryjRadioButtonActionPerformed()
     * Description  Event handler for the binaryjRadioButton. Makes 
     *              binaryJTextField not editable and linearJTextField editable
     * @param       intArray int[]
     * @param       key int
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * </pre>
     ------------------------------------------------------------------------*/
    private void binaryjRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryjRadioButtonActionPerformed
        linearjTextField.setText("");
        linearjTextField.setEnabled(false);
        binaryjTextField.setEditable(true);
        binaryjTextField.setEnabled(true);
        binaryjTextField.requestFocus();
    }//GEN-LAST:event_binaryjRadioButtonActionPerformed
    /**------------------------------------------------------------------------
      * <pre>
     * Method       linearjTextFieldActionPerformed()
     * Description  Event handler for the linearjTextField. Creates a copy of the 
     *              and integerArray, dataArray, and calls linearSearch to find 
     *              the specified key
     * @param       evt--ActionEvent
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * </pre>
     ------------------------------------------------------------------------*/
    private void linearjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearjTextFieldActionPerformed
        //Search for specified number
        int index = 0, number = 0;
        int[] dataArray = new int[integerArray.length];
        //copy objects into primitive array
        for (int i = 0; i < dataArray.length; i++)
            dataArray[i]=integerArray[i];
        if(Validation.isInteger(linearjTextField.getText()))
        {
            number = Integer.parseInt(linearjTextField.getText());
            index = SortingAndSearchingAlgorithms.linearSearch(dataArray, number);
            this.setTitle("Searching for " + number);
        }
        if (index < 0)
            linearjTextField.setText(number + "is not here");
        else 
        {
            linearjTextField.setText(number + " found at " + index);
            originaljList.setSelectedIndex(index);
        }
    }//GEN-LAST:event_linearjTextFieldActionPerformed
    /**------------------------------------------------------------------------
      * <pre>
     * Method       binaryjTextFieldActionPerformed()
     * Description  Event handler for the binaryjTextField. Creates a copy of the 
     *              and integerArray, dataArray, and calls binaryjTextField to find 
     *              the specified key
     * @param       evt--ActionEvent
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * </pre>
     ------------------------------------------------------------------------*/
    private void binaryjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryjTextFieldActionPerformed
        //Search for specified number
        int index = 0, number = 0;
        int[] dataArray = new int[integerArray.length];
        //copy objects into primitive array
        for (int i = 0; i < dataArray.length; i++)
            dataArray[i]=integerArray[i];
        SortingAndSearchingAlgorithms.quickSort(dataArray);
        display(dataArray);
        if(Validation.isInteger(binaryjTextField.getText()))
        {
            number = Integer.parseInt(binaryjTextField.getText());
            index = SortingAndSearchingAlgorithms.binarySearch(dataArray, number);
            this.setTitle("Searching for " + number);
        }
        if (index < 0)
            binaryjTextField.setText(number + " is not here");
        else 
        {
            binaryjTextField.setText(number + " found at " + index);
            sortedjList.setSelectedIndex(index);
        }
    }//GEN-LAST:event_binaryjTextFieldActionPerformed

    private void heapjRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heapjRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_heapjRadioButtonActionPerformed
    /**------------------------------------------------------------------------
      * <pre>
     * Method       generateJMenuItemActionPerformed()
     * Description  Event handler for the generateJMenuItem. Crates and displays
     *              a JTable by invoking the ComparisonJTable constructor 
     * @param       evt--ActionEvent
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * </pre>
     ------------------------------------------------------------------------*/
    private void generateJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateJMenuItemActionPerformed
        //Create a JDialog with comparison JTable
        CreateJTable dialogTable = new CreateJTable(this, true, integerArray);
        dialogTable.setVisible(true);
    }//GEN-LAST:event_generateJMenuItemActionPerformed
    /**------------------------------------------------------------------------
      * <pre>
     * Method       display()
     * Description  Display sorted array in the sortedJList
     * @param       intArray int[]
     * @param       key int
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * </pre>
     ------------------------------------------------------------------------*/
    private void display(int[] intArray)
    {
        Integer[] integerArray;
        integerArray = new Integer[intArray.length];
        for(int i = 0; i < intArray.length; i++)
            integerArray[i] = intArray[i];
        sortedjList.setListData(integerArray);   
    }
    /**------------------------------------------------------------------------
      * <pre>
     * Method       whichRadioButton()
     * Description  Determine which radio button is selected and if none selected bubble
     * @return      buttonNumber--int
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * </pre>
     ------------------------------------------------------------------------*/
    private int whichRadioButton()
    {
        int buttonNumber = 0;
        
        if(selectionjRadioButton.isSelected())
            return 1;
        else if(insertionjRadioButton.isSelected())
            return 2;
        else if (quickjRadioButton.isSelected())
            return 3;
        else if(mergejRadioButton.isSelected())
            return 4;
        else if (heapjRadioButton.isSelected())
            return 5;
        else{
            bubblejRadioButton.setSelected(true);
            return buttonNumber;
        }
        
    }
    
    /**------------------------------------------------------------------------
      * <pre>
     * Method       getTable()
     * Description  Creating 2-dimensional array
     * @return      JTable
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * </pre>
     ------------------------------------------------------------------------*/
    public JTable getTable()
    {
       byte SORTS = 6;
       Object[][] table = new Object[SORTS][2];
       String[] sorts = {"Bubble", "Selection", "Insertion", "Quick", 
            "Merge", "Heap"};
       long times[] = new long[sorts.length];
       int[] intArray = new int[integerArray.length]; //for timing
       int[] copyArray = new int[integerArray.length]; //to guarantee same array
       
       //copy Integer array into primitive int type intArray
       for(int i = 0; i < intArray.length; i++){
           intArray[i] = integerArray[i];
       }
       
       //bubble 
       System.arraycopy(intArray, 0, copyArray, 0, intArray.length);
       startTime = System.currentTimeMillis();
       SortingAndSearchingAlgorithms.bubbleSort(copyArray);
       stopTime = System.currentTimeMillis();
       times[0] = stopTime - startTime;
       //selection 
       System.arraycopy(intArray, 0, copyArray, 0, intArray.length);
       startTime = System.currentTimeMillis();
       SortingAndSearchingAlgorithms.selectionSort(copyArray);
       stopTime = System.currentTimeMillis();
       times[1] = stopTime - startTime;
       //insertion
       System.arraycopy(intArray, 0, copyArray, 0, intArray.length);
       startTime = System.currentTimeMillis();
       SortingAndSearchingAlgorithms.insertionSort(copyArray);
       stopTime = System.currentTimeMillis();
       times[2] = stopTime - startTime;
       //quick 
       System.arraycopy(intArray, 0, copyArray, 0, intArray.length);
       startTime = System.currentTimeMillis();
       SortingAndSearchingAlgorithms.quickSort(copyArray);
       stopTime = System.currentTimeMillis();
       times[3] = stopTime - startTime;
       //merge
       System.arraycopy(intArray, 0, copyArray, 0, intArray.length);
       startTime = System.currentTimeMillis();
       SortingAndSearchingAlgorithms.mergeSort(copyArray);
       stopTime = System.currentTimeMillis();
       times[4] = stopTime - startTime;
       //heap
       System.arraycopy(intArray, 0, copyArray, 0, intArray.length);
       startTime = System.currentTimeMillis();
       SortingAndSearchingAlgorithms.heapSort(copyArray);
       stopTime = System.currentTimeMillis();
       times[4] = stopTime - startTime;
        
       for(int row = 0; row < sorts.length; row++)
       {
           table[row][0] = sorts[row];
           table[row][1] = times[row];
       } 
       return new JTable(table, sorts);
       
    }
    /**------------------------------------------------------------------------
      * <pre>
     * Method       generateRandomInt()
     * Description  Fills integerArray with random integers in specified range
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * </pre>
     ------------------------------------------------------------------------*/
    public void generateRandomInt()
    {
        for(int i = 0; i<integerArray.length; i++){
            integerArray[i]=rand.nextInt(RANGE);
        }
    }
    
    
     /**------------------------------------------------------------------------
      * <pre>
     * Method       main()
     * Description  Call the constructor to create an instance of the form
     * @param       args are the command line strings
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * </pre>
     ------------------------------------------------------------------------*/
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SortingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SortingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SortingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SortingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //show Splash screen
        Splash mySplash = new Splash(2000);
        mySplash.showSplash();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SortingGUI().setVisible(true);
            }
        });
    }
    
     /**------------------------------------------------------------------------
      * <pre>
     * Class        CreateJTable()
     * Description  A nested class representing the JDialog GUI to compare 
     *              and display the time results for the sorting algorithm
     * @author      <i>Abylay Dospayev</i>
     * Date         10/14/2022
     * History Log
     * version      %1% %0%
     * </pre>
     ------------------------------------------------------------------------*/
    final class CreateJTable extends JDialog
    {
        //instance variable declaration
        private javax.swing.JTable compareJTable;
        private javax.swing.JScrollPane compareScrollPane;
        private javax.swing.JButton okJButton;
        
        String[] sorts = {"Bubble", "Selection", "Insertion", "Quick", 
            "Merge", "Heap"};
        long[] times = new long[sorts.length];
        private Object[][] table;
        

        /**------------------------------------------------------------------------
        * <pre>
        * Constructor   CreateJTable()
        * Description   Constructor. Creates a JTable with the sorting results with 
        *               a call to the setTable method, builds the JDialog GUI with call 
        *               to initComponents, centers the form, and sets pi.png as icon for the GUI
        * @author       <i>Abylay Dospayev</i>
        * @param        parent java.awt.Frame
        * @param        modal boolean
        * @param        array Integer[]
        * Date          10/14/2022
        * History Log
        * </pre>
        ------------------------------------------------------------------------*/
        public CreateJTable(java.awt.Frame parent, boolean modal, Integer[] array)
        {
            super(parent, modal);
            setTable(array);    //create compareJTable
            initComponents();
            this.setIconImage(Toolkit.getDefaultToolkit().getImage("src/Sortings/pi.png"));
            //centers the form at start
            setLocationRelativeTo(null);
        }
        /**------------------------------------------------------------------------
        * <pre>
        * Method       setTable()
        * Description  Times each of the six sorting algorithms, saves the results
        *              in the times arrays and create a JTable with those times in milliseconds
        *              displayed
        * @param       args are the command line strings
        * @author      <i>Abylay Dospayev</i>
        * Date         10/14/2022
        * History Log
        * </pre>
        ------------------------------------------------------------------------*/
        public void setTable(Integer[] array){
            long startTime, stopTime, elapsedTime;   //for timing
            int[] intArray = new int[array.length];
            int[] copyArray = new int[array.length];
            
            //copy Integer array into intArray
            for(int i = 0; i < intArray.length; i++)
                intArray[i] = array[i]; //.intValue();
            //bubble 
            System.arraycopy(intArray, 0, copyArray, 0, intArray.length);
            startTime = System.currentTimeMillis();
            SortingAndSearchingAlgorithms.bubbleSort(copyArray);
            stopTime = System.currentTimeMillis();
            times[0] = stopTime - startTime;
            //selection 
            System.arraycopy(intArray, 0, copyArray, 0, intArray.length);
            startTime = System.currentTimeMillis();
            SortingAndSearchingAlgorithms.selectionSort(copyArray);
            stopTime = System.currentTimeMillis();
            times[1] = stopTime - startTime;
            //insertion
            System.arraycopy(intArray, 0, copyArray, 0, intArray.length);
            startTime = System.currentTimeMillis();
            SortingAndSearchingAlgorithms.insertionSort(copyArray);
            stopTime = System.currentTimeMillis();
            times[2] = stopTime - startTime;
            //quick 
            System.arraycopy(intArray, 0, copyArray, 0, intArray.length);
            startTime = System.currentTimeMillis();
            SortingAndSearchingAlgorithms.quickSort(copyArray);
            stopTime = System.currentTimeMillis();
            times[3] = stopTime - startTime;
            //merge
            System.arraycopy(intArray, 0, copyArray, 0, intArray.length);
            startTime = System.currentTimeMillis();
            SortingAndSearchingAlgorithms.mergeSort(copyArray);
            stopTime = System.currentTimeMillis();
            times[4] = stopTime - startTime;
            //heap
            System.arraycopy(intArray, 0, copyArray, 0, intArray.length);
            startTime = System.currentTimeMillis();
            SortingAndSearchingAlgorithms.heapSort(copyArray);
            stopTime = System.currentTimeMillis();
            times[4] = stopTime - startTime;
            
            //fill-in-table
            for(int row = 0; row < sorts.length; row++)
            {
                table[row][0]=sorts[row];
                table[row][1] = times[row];
            }
            //return new JTable(table, sorts);
            compareJTable = new JTable(table, sorts);
            
        }
        /**------------------------------------------------------------------------
        * <pre>
        * Method       initComponents()
        * Description  build the JDialog from scratch
        * @param       array Integer[]
        * @author      <i>Abylay Dospayev</i>
        * Date         10/14/2022
        * History Log
        * </pre>
        ------------------------------------------------------------------------*/
        private void initComponents()
        {
            compareScrollPane = new javax.swing.JScrollPane();
            okJButton = new javax.swing.JButton();
            
            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            setTitle("Comparison of Sorting Algorithms");
            setType(java.awt.Window.Type.UTILITY);
            
            compareJTable.setFont(new java.awt.Font("Tahoma", 0, 14));
            compareJTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]
                    {
                        {table[0][0], times[0]},
                        {table[1][0], times[1]},
                        {table[2][0], times[2]},
                        {table[3][0], times[3]},
                        {table[4][0], times[4]},
                        {table[5][0], times[5]}
                    },
                    new String []
                    {
                        "Sorting Algorithms","Time (in milliseconds)"
                    }
            )
            {
                Class[] types = new Class[]
                {
                  java.lang.String.class, java.lang.Long.class  
                };
                boolean[] canEdit = new boolean[]
                {
                    false, false
                };
                
                @Override
                public Class getColumnClass(int columnIndex)
                {
                    return types [columnIndex];
                }
                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex)
                {
                    return canEdit[columnIndex];
                }
            });
            compareScrollPane.setViewportView(compareJTable);
            
            okJButton.setFont(new java.awt.Font("Tahoma", 0, 14)); 
            okJButton.setMnemonic('O');
            okJButton.setText("OK");
            okJButton.addActionListener(new java.awt.event.ActionListener()
            {
               @Override
               public void actionPerformed(java.awt.event.ActionEvent evt)
               {
                   okJButtonActionPerformed(evt);
               }
            });
            
            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup())
                        .addGap(30, 30, 30)
                        .addComponent(compareScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                        .addGap(29, 29, 29)
                    .addGroup(layout.createSequentialGroup())
                        .addGap(161, 161, 161)
                        .addComponent(okJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
            );
            layout.setVerticalGroup(
                    layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup())
                        .addGap(23, 23, 23)
                        .addComponent(compareScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(okJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
            );
            pack();
        }
        private void okJButtonActionPerformed(ActionEvent evt) 
        {
            //Close form
            this.dispose();
        }
    }
    
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutjMenuItem;
    private javax.swing.JRadioButton binaryjRadioButton;
    private javax.swing.JTextField binaryjTextField;
    private javax.swing.JRadioButton bubblejRadioButton;
    private javax.swing.JPanel controljPanel;
    private javax.swing.JButton createjButton;
    private javax.swing.JMenuItem createjMenuItem;
    private javax.swing.JButton exitjButton;
    private javax.swing.JMenu filejMenu;
    private javax.swing.JMenuItem generateJMenuItem;
    private javax.swing.JRadioButton heapjRadioButton;
    private javax.swing.JMenu helpjMenu;
    private javax.swing.JRadioButton insertionjRadioButton;
    private javax.swing.JRadioButton linearjRadioButton;
    private javax.swing.JTextField linearjTextField;
    private javax.swing.JRadioButton mergejRadioButton;
    private javax.swing.JLabel originaljLabel;
    private javax.swing.JList originaljList;
    private javax.swing.JPanel originaljPanel;
    private javax.swing.JScrollPane originaljScrollPane;
    private javax.swing.JMenuItem printjMenuItem;
    private javax.swing.JRadioButton quickjRadioButton;
    private javax.swing.JMenuItem quitjMenuItem;
    private javax.swing.JMenuItem savejMenuItem;
    private javax.swing.ButtonGroup searchingbuttonGroup;
    private javax.swing.JLabel searchingjLabel;
    private javax.swing.JPanel searchingjPanel;
    private javax.swing.JRadioButton selectionjRadioButton;
    private javax.swing.JLabel sortedjLabel;
    private javax.swing.JList sortedjList;
    private javax.swing.JPanel sortedjPanel;
    private javax.swing.JScrollPane sortedjScrollPanel;
    private javax.swing.JPanel sortingAlgorithmjPanel;
    private javax.swing.JLabel sortingAlgoritmjLabel;
    private javax.swing.ButtonGroup sortingbuttonGroup;
    private javax.swing.JMenuBar sortingjMenuBar;
    private javax.swing.JPanel sortingjPanel;
    private javax.swing.JButton sortjButton;
    private javax.swing.JMenu statisticsMenu;
    private javax.swing.JLabel timejLabel;
    private javax.swing.JTextField timejTextField;
    // End of variables declaration//GEN-END:variables
}
